{
  "metadata": {
    "name": "CSV Example",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n        <br><h1  style=\"color:#555\">CSV Example </h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n       Load CSV and do data analysis on Scribbler\n    </p><br></div>",
      "status": "",
      "output": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n        <br><h1 style=\"color:#555\">CSV Example </h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n       Load CSV and do data analysis on Scribbler\n    </p><br></div>",
      "type": "html"
    },
    {
      "code": "## Data Source\nIn this example this data is used: \n- Google drive: [https://drive.google.com/file/d/1yAGPqilew7W7B9JNfMR-sLJaSXWHT1nv/view?usp=sharing](https://drive.google.com/file/d/1yAGPqilew7W7B9JNfMR-sLJaSXWHT1nv/view?usp=sharing)\n- Github: [https://github.com/radheydetroja/scribbler_csv/blob/main/updated_social_media_data.csv](https://github.com/radheydetroja/scribbler_csv/blob/main/updated_social_media_data.csv)\n\nYou can down load them and uuse to upload in the next cell",
      "status": "",
      "output": "<h2>Data Source</h2>\n<p>In this example this data is used: </p>\n<ul>\n<li>Google drive: <a href=\"https://drive.google.com/file/d/1yAGPqilew7W7B9JNfMR-sLJaSXWHT1nv/view?usp=sharing\">https://drive.google.com/file/d/1yAGPqilew7W7B9JNfMR-sLJaSXWHT1nv/view?usp=sharing</a></li>\n<li>Github: <a href=\"https://github.com/radheydetroja/scribbler_csv/blob/main/updated_social_media_data.csv\">https://github.com/radheydetroja/scribbler_csv/blob/main/updated_social_media_data.csv</a></li>\n</ul>\n<p>You can down load them and uuse to upload in the next cell</p>\n",
      "type": "html"
    },
    {
      "code": "### Load Data",
      "status": "",
      "output": "<h3>Load Data</h3>\n",
      "type": "html"
    },
    {
      "code": "\n\n\n// Step 1: Upload and parse CSV\nlet csvData = await scrib.uploadFile();\nlet parsedData = csvData.split('\\n').slice(1, 51); // Skip header, take first 50 rows\n\n// Store finalData globally\nwindow.finalData = parsedData.map(row => row.split(','));",
      "status": "[2]<br><span style=\"font-size:8px\">4.853s<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "## Container for Charts",
      "status": "",
      "output": "<h2>Container for Charts</h2>\n",
      "type": "html"
    },
    {
      "code": "//>html\n<container id='chart-container'></container>",
      "status": "[1]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": "\n<container id=\"chart-container\"></container> <br>",
      "type": "code"
    },
    {
      "code": " window.charts=document.getElementById(\"chart-container\");\n\n\ncharts.style.display = \"flex\";\ncharts.style.flexDirection = \"column\";\ncharts.style.gap = \"20px\";\ncharts.style.padding = \"10px\";\n\n",
      "status": "[18]<br><span style=\"font-size:8px\">7ms<span></span></span>",
      "output": "10px <br>",
      "type": "code"
    },
    {
      "code": "### Chart.js For Plotting",
      "status": "",
      "output": "<h3>Chart.js For Plotting</h3>\n",
      "type": "html"
    },
    {
      "code": "// Load Chart.js\nawait scrib.loadScript(\"https://cdn.jsdelivr.net/npm/chart.js\", true);\n\n// Define canvas helper globally\nwindow.createCanvas = function(id) {\n  const canvas = document.createElement('canvas');\n  canvas.id = id;\n  canvas.width = 500;\n  canvas.height = 300;\n  charts.appendChild(canvas);\n  return canvas.getContext('2d');\n};",
      "status": "[19]<br><span style=\"font-size:8px\">22ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "### Chart 1: Bar Chart (Avg Likes by Post Type)",
      "status": "",
      "output": "<h3>Chart 1: Bar Chart (Avg Likes by Post Type)</h3>\n",
      "type": "html"
    },
    {
      "code": "\nlet finalData = window.finalData;\nlet likeMap = {};\nfor (let row of finalData) {\n  let type = row[1];\n  let likes = parseInt(row[2]);\n  if (!likeMap[type]) likeMap[type] = [];\n  likeMap[type].push(likes);\n}\nlet barData = Object.entries(likeMap).map(([type, arr]) => ({\n  type,\n  avg: Math.round(arr.reduce((a, b) => a + b, 0) / arr.length * 100) / 100\n}));\nlet barX = barData.map(d => d.type);\nlet barY = barData.map(d => d.avg);\n\nnew Chart(window.createCanvas('barChart'), {\n  type: 'bar',\n  data: {\n    labels: barX,\n    datasets: [{\n      label: 'Avg Likes',\n      data: barY,\n      backgroundColor: barX.map((_, i) => `hsl(${i * 60}, 70%, 70%)`),\n      borderColor: barX.map((_, i) => `hsl(${i * 60}, 70%, 50%)`),\n      borderWidth: 1\n    }]\n  },\n  options: {\n    plugins: {\n      title: { display: true, text: 'Avg Likes by Post Type', font: { size: 14 } },\n      legend: { display: false }\n    },\n    scales: {\n      x: { ticks: { font: { size: 10 } } },\n      y: { beginAtZero: true, ticks: { font: { size: 10 } } }\n    }\n  }\n});\nundefined;",
      "status": "[20]<br><span style=\"font-size:8px\">29ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "### Chart 2: Pie Chart (Total Shares by Post Type)",
      "status": "",
      "output": "<h3>Chart 2: Pie Chart (Total Shares by Post Type)</h3>\n",
      "type": "html"
    },
    {
      "code": "\nlet finalData = window.finalData;\nlet shareMap = {};\nfor (let row of finalData) {\n  let type = row[1];\n  let shares = parseInt(row[3]);\n  if (!shareMap[type]) shareMap[type] = 0;\n  shareMap[type] += shares;\n}\nlet pieX = Object.keys(shareMap);\nlet pieY = Object.values(shareMap);\n\nnew Chart(window.createCanvas('pieChart'), {\n  type: 'pie',\n  data: {\n    labels: pieX,\n    datasets: [{\n      label: 'Total Shares',\n      data: pieY,\n      backgroundColor: pieX.map((_, i) => `hsl(${i * 60}, 70%, 70%)`)\n    }]\n  },\n  options: {\n    plugins: {\n      title: { display: true, text: 'Total Shares by Post Type', font: { size: 14 } },\n      legend: { labels: { font: { size: 10 } } }\n    }\n  }\n});\nundefined;",
      "status": "[21]<br><span style=\"font-size:8px\">19ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "### Chart 3: Line Chart (Total Comments over Date Posted)",
      "status": "",
      "output": "<h3>Chart 3: Line Chart (Total Comments over Date Posted)</h3>\n",
      "type": "html"
    },
    {
      "code": "\nlet finalData = window.finalData;\nlet dateMap = {};\nfor (let row of finalData) {\n  let date = row[5].split('T')[0];\n  let comments = parseInt(row[4]);\n  if (!dateMap[date]) dateMap[date] = 0;\n  dateMap[date] += comments;\n}\nlet lineX = Object.keys(dateMap).sort();\nlet lineY = lineX.map(d => dateMap[d]);\n\nnew Chart(window.createCanvas('lineChart'), {\n  type: 'line',\n  data: {\n    labels: lineX,\n    datasets: [{\n      label: 'Total Comments',\n      data: lineY,\n      fill: false,\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.3\n    }]\n  },\n  options: {\n    plugins: {\n      title: { display: true, text: 'Comments Over Time', font: { size: 14 } }\n    },\n    scales: {\n      x: {\n        title: { display: true, text: 'Date', font: { size: 12 } },\n        ticks: { font: { size: 10 } }\n      },\n      y: {\n        title: { display: true, text: 'Comments', font: { size: 12 } },\n        beginAtZero: true,\n        ticks: { font: { size: 10 } }\n      }\n    }\n  }\n});\nundefined;",
      "status": "[22]<br><span style=\"font-size:8px\">18ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "### Chart 4: Doughnut Chart (AI vs Human Generated Posts)",
      "status": "",
      "output": "<h3>Chart 4: Doughnut Chart (AI vs Human Generated Posts)</h3>\n",
      "type": "html"
    },
    {
      "code": "\nlet finalData = window.finalData;\nlet aiCount = 0, humanCount = 0;\nfor (let row of finalData) {\n  if (row[7]?.toLowerCase().includes(\"yes\")) aiCount++;\n  else humanCount++;\n}\n\nnew Chart(window.createCanvas('doughnutChart'), {\n  type: 'doughnut',\n  data: {\n    labels: ['AI Generated', 'Human Generated'],\n    datasets: [{\n      label: 'Post Origin',\n      data: [aiCount, humanCount],\n      backgroundColor: ['#36A2EB', '#FF6384']\n    }]\n  },\n  options: {\n    plugins: {\n      title: { display: true, text: 'AI vs Human Generated Posts', font: { size: 14 } },\n      legend: { labels: { font: { size: 10 } } }\n    }\n  }\n});\nundefined;",
      "status": "[24]<br><span style=\"font-size:8px\">14ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/scribbler",
  "run_on_load": false
}